{
  "createdAt": "2025-07-01T11:43:24.249Z",
  "updatedAt": "2025-07-08T16:53:10.000Z",
  "id": "bIkfuL8NVfDk8qEm",
  "name": "001. Webhook으로 간단한 웹페이지 띄우기 - webhook trigger",
  "active": true,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "content": "## HTML Webpage 띄우기\n- Generate HTML Template\n- Respond to Webhook\n  - Respond with {Text}\n  - Respond body {{ $json.html }}",
        "width": 280
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -120,
        -240
      ],
      "id": "b0ba2682-e3e9-42af-9ac7-8e481790700a",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "html": "<!DOCTYPE html>\n<html lang=\"ko\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>YouTube Workflow Manager</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.4.0/css/all.min.css\">\n    <script src=\"https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.39.3/dist/umd/supabase.min.js\"></script>\n    <style>\n        /* n8n Workflow URLs - 여기에 실제 URL을 입력하세요 */\n        :root {\n            --playlist-fetch-url: 'https://your-n8n-instance.com/webhook/playlist-fetch';\n            --workflow-start-url: 'https://your-n8n-instance.com/webhook/workflow-start';\n            --automation-register-url: 'https://your-n8n-instance.com/webhook/automation-register';\n        }\n\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            margin: 0;\n            padding: 0;\n            background: #ffffff;\n            color: #2d3748;\n        }\n\n        .app-container {\n            display: flex;\n            min-height: 100vh;\n        }\n\n        .sidebar {\n            width: 360px;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 24px;\n            box-shadow: 2px 0 10px rgba(0,0,0,0.1);\n            overflow-y: auto;\n        }\n\n        .sidebar h1 {\n            font-size: 20px;\n            font-weight: 600;\n            margin-bottom: 8px;\n            display: flex;\n            align-items: center;\n            gap: 8px;\n        }\n\n        .sidebar-subtitle {\n            font-size: 14px;\n            opacity: 0.8;\n            margin-bottom: 32px;\n        }\n\n        .form-group {\n            margin-bottom: 24px;\n        }\n\n        .form-label {\n            display: block;\n            font-size: 14px;\n            font-weight: 500;\n            margin-bottom: 8px;\n        }\n\n        .form-input {\n            width: 100%;\n            padding: 12px 16px;\n            border: none;\n            border-radius: 12px;\n            background: rgba(255,255,255,0.1);\n            color: white;\n            font-size: 14px;\n            backdrop-filter: blur(10px);\n            transition: all 0.3s ease;\n        }\n\n        .form-input::placeholder {\n            color: rgba(255,255,255,0.7);\n        }\n\n        .form-input:focus {\n            outline: none;\n            background: rgba(255,255,255,0.2);\n            transform: translateY(-2px);\n        }\n\n        .date-group {\n            display: flex;\n            gap: 16px;\n            align-items: center;\n        }\n\n        .date-input-group {\n            flex: 1;\n        }\n\n        .date-input-group label {\n            font-size: 12px;\n            opacity: 0.8;\n            margin-bottom: 4px;\n        }\n\n        .date-input {\n            width: 100%;\n            padding: 10px 12px;\n            border: none;\n            border-radius: 8px;\n            background: rgba(255,255,255,0.1);\n            color: white;\n            font-size: 13px;\n            backdrop-filter: blur(10px);\n        }\n\n        .date-input:focus {\n            outline: none;\n            background: rgba(255,255,255,0.2);\n        }\n\n        .dropdown {\n            position: relative;\n        }\n\n        .dropdown-select {\n            width: 100%;\n            padding: 12px 16px;\n            border: none;\n            border-radius: 12px;\n            background: rgba(255,255,255,0.1);\n            color: white;\n            font-size: 14px;\n            backdrop-filter: blur(10px);\n            cursor: pointer;\n            appearance: none;\n        }\n\n        .dropdown-select option {\n            background: #4a5568;\n            color: white;\n        }\n\n        .tag-container {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 8px;\n            margin-top: 8px;\n        }\n\n        .tag {\n            background: rgba(255,255,255,0.2);\n            color: white;\n            padding: 4px 8px;\n            border-radius: 16px;\n            font-size: 12px;\n            display: flex;\n            align-items: center;\n            gap: 4px;\n        }\n\n        .tag-remove {\n            cursor: pointer;\n            opacity: 0.7;\n        }\n\n        .tag-remove:hover {\n            opacity: 1;\n        }\n\n        .channel-input-group {\n            display: flex;\n            gap: 8px;\n        }\n\n        .channel-input {\n            flex: 1;\n        }\n\n        .add-channel-btn {\n            padding: 12px;\n            background: #4299e1;\n            border: none;\n            border-radius: 12px;\n            color: white;\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n\n        .add-channel-btn:hover {\n            background: #3182ce;\n            transform: translateY(-2px);\n        }\n\n        .control-buttons {\n            display: flex;\n            flex-direction: column;\n            gap: 12px;\n            margin-top: 32px;\n        }\n\n        .btn {\n            padding: 16px 24px;\n            border: none;\n            border-radius: 12px;\n            font-size: 16px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            gap: 8px;\n        }\n\n        .btn-primary {\n            background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%);\n            color: white;\n        }\n\n        .btn-primary:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 8px 25px rgba(66, 153, 225, 0.3);\n        }\n\n        .btn-secondary {\n            background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);\n            color: white;\n        }\n\n        .btn-secondary:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 8px 25px rgba(72, 187, 120, 0.3);\n        }\n\n        .btn-stop {\n            background: linear-gradient(135deg, #f56565 0%, #e53e3e 100%);\n            color: white;\n        }\n\n        .main-content {\n            flex: 1;\n            display: flex;\n            position: relative;\n        }\n\n        .canvas-container {\n            flex: 1;\n            position: relative;\n            padding: 40px;\n            background: #ffffff;\n            overflow: auto;\n        }\n\n        .canvas-header {\n            text-align: center;\n            margin-bottom: 40px;\n        }\n\n        .canvas-title {\n            font-size: 28px;\n            font-weight: 700;\n            color: #2d3748;\n            margin-bottom: 8px;\n        }\n\n        .canvas-subtitle {\n            font-size: 16px;\n            color: #718096;\n        }\n\n        .workflow-canvas {\n            position: relative;\n            min-height: 600px;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n\n        .task-node {\n            position: relative;\n            width: 280px;\n            margin-bottom: 80px;\n            padding: 20px;\n            border-radius: 16px;\n            box-shadow: 0 4px 20px rgba(0,0,0,0.1);\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n\n        .task-node:hover {\n            transform: translateY(-4px);\n            box-shadow: 0 8px 30px rgba(0,0,0,0.15);\n        }\n\n        .task-node.completed {\n            background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);\n            color: white;\n        }\n\n        .task-node.running {\n            background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%);\n            color: white;\n        }\n\n        .task-node.pending {\n            background: linear-gradient(135deg, #a0aec0 0%, #718096 100%);\n            color: white;\n        }\n\n        .task-node.waiting {\n            background: linear-gradient(135deg, #ed8936 0%, #dd6b20 100%);\n            color: white;\n        }\n\n        .task-node h3 {\n            font-size: 16px;\n            font-weight: 600;\n            margin-bottom: 8px;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n        }\n\n        .task-node p {\n            font-size: 14px;\n            opacity: 0.9;\n            margin-bottom: 12px;\n        }\n\n        .task-status {\n            padding: 4px 8px;\n            border-radius: 12px;\n            font-size: 12px;\n            font-weight: 500;\n            background: rgba(255,255,255,0.2);\n        }\n\n        .progress-bar {\n            height: 4px;\n            background: rgba(255,255,255,0.3);\n            border-radius: 2px;\n            overflow: hidden;\n            margin-top: 8px;\n        }\n\n        .progress-fill {\n            height: 100%;\n            background: rgba(255,255,255,0.8);\n            transition: width 0.3s ease;\n        }\n\n        .connections-svg {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            pointer-events: none;\n            z-index: 1;\n        }\n        \n        .connection-line {\n            stroke: #cbd5e0;\n            stroke-width: 2;\n            fill: none;\n            stroke-dasharray: 5,5;\n            opacity: 0.7;\n        }\n      \n        .task-node {\n            position: relative;\n            z-index: 2;\n        }\n\n        .right-panel {\n            width: 300px;\n            background: #f7fafc;\n            border-left: 1px solid #e2e8f0;\n            padding: 24px;\n            transform: translateX(100%);\n            transition: transform 0.3s ease;\n        }\n\n        .right-panel.active {\n            transform: translateX(0);\n        }\n\n        .right-panel h3 {\n            font-size: 18px;\n            font-weight: 600;\n            margin-bottom: 16px;\n            color: #2d3748;\n        }\n\n        .empty-state {\n            text-align: center;\n            padding: 60px 20px;\n            color: #a0aec0;\n        }\n\n        .empty-state i {\n            font-size: 48px;\n            margin-bottom: 16px;\n        }\n\n        .empty-state h3 {\n            font-size: 18px;\n            margin-bottom: 8px;\n        }\n\n        .empty-state p {\n            font-size: 14px;\n        }\n\n        .popup-overlay {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0,0,0,0.5);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            z-index: 1000;\n            opacity: 0;\n            visibility: hidden;\n            transition: all 0.3s ease;\n        }\n\n        .popup-overlay.active {\n            opacity: 1;\n            visibility: visible;\n        }\n\n        .popup {\n            background: white;\n            padding: 32px;\n            border-radius: 16px;\n            width: 90%;\n            max-width: 400px;\n            box-shadow: 0 20px 60px rgba(0,0,0,0.3);\n            transform: scale(0.9);\n            transition: transform 0.3s ease;\n        }\n\n        .popup-overlay.active .popup {\n            transform: scale(1);\n        }\n\n        .popup h3 {\n            font-size: 20px;\n            font-weight: 600;\n            margin-bottom: 20px;\n            color: #2d3748;\n        }\n\n        .popup-form {\n            display: flex;\n            flex-direction: column;\n            gap: 16px;\n        }\n\n        .popup-input {\n            padding: 12px 16px;\n            border: 2px solid #e2e8f0;\n            border-radius: 8px;\n            font-size: 14px;\n            transition: border-color 0.3s ease;\n        }\n\n        .popup-input:focus {\n            outline: none;\n            border-color: #4299e1;\n        }\n\n        .popup-select {\n            padding: 12px 16px;\n            border: 2px solid #e2e8f0;\n            border-radius: 8px;\n            font-size: 14px;\n            background: white;\n            cursor: pointer;\n        }\n\n        .popup-buttons {\n            display: flex;\n            gap: 12px;\n            justify-content: flex-end;\n            margin-top: 20px;\n        }\n\n        .popup-btn {\n            padding: 10px 20px;\n            border: none;\n            border-radius: 8px;\n            font-size: 14px;\n            font-weight: 500;\n            cursor: pointer;\n            transition: all 0.3s ease;\n        }\n\n        .popup-btn-primary {\n            background: #4299e1;\n            color: white;\n        }\n\n        .popup-btn-primary:hover {\n            background: #3182ce;\n        }\n\n        .popup-btn-secondary {\n            background: #e2e8f0;\n            color: #4a5568;\n        }\n\n        .popup-btn-secondary:hover {\n            background: #cbd5e0;\n        }\n\n        @media (max-width: 768px) {\n            .sidebar {\n                width: 100%;\n                position: fixed;\n                top: 0;\n                left: -100%;\n                height: 100vh;\n                z-index: 999;\n                transition: left 0.3s ease;\n            }\n\n            .sidebar.active {\n                left: 0;\n            }\n\n            .main-content {\n                width: 100%;\n            }\n\n            .right-panel {\n                width: 100%;\n                position: fixed;\n                top: 0;\n                right: -100%;\n                height: 100vh;\n                z-index: 998;\n            }\n\n            .right-panel.active {\n                right: 0;\n                transform: translateX(0);\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"app-container\">\n        <!-- 왼쪽 사이드바 -->\n        <div class=\"sidebar\">\n            <h1>\n                <i class=\"fab fa-youtube\"></i>\n                YouTube Workflow\n            </h1>\n            <div class=\"sidebar-subtitle\">워크플로우 설정 대시보드</div>\n            \n            <div class=\"form-group\">\n                <label class=\"form-label\">검색어</label>\n                <input type=\"text\" class=\"form-input\" id=\"searchQuery\" placeholder=\"YouTube 검색어를 입력하세요\">\n            </div>\n            \n            <div class=\"form-group\">\n                <label class=\"form-label\">업로드 날짜</label>\n                <div class=\"date-group\">\n                    <div class=\"date-input-group\">\n                        <label>After</label>\n                        <input type=\"date\" class=\"date-input\" id=\"dateAfter\">\n                    </div>\n                    <div class=\"date-input-group\">\n                        <label>Before</label>\n                        <input type=\"date\" class=\"date-input\" id=\"dateBefore\">\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"form-group\">\n                <label class=\"form-label\">플레이리스트</label>\n                <div class=\"dropdown\">\n                    <select class=\"dropdown-select\" id=\"playlistSelect\">\n                        <option value=\"\">플레이리스트 없음</option>\n                    </select>\n                </div>\n                <div class=\"tag-container\" id=\"selectedPlaylists\"></div>\n            </div>\n            \n            <div class=\"form-group\">\n                <label class=\"form-label\">YouTube 채널</label>\n                <div class=\"channel-input-group\">\n                    <input type=\"text\" class=\"form-input channel-input\" id=\"channelInput\" placeholder=\"채널 이름을 입력하세요\">\n                    <button class=\"add-channel-btn\" onclick=\"addChannel()\">\n                        <i class=\"fas fa-plus\"></i>\n                    </button>\n                </div>\n                <div class=\"tag-container\" id=\"selectedChannels\"></div>\n            </div>\n            \n            <div class=\"control-buttons\">\n                <button class=\"btn btn-primary\" id=\"startBtn\" onclick=\"toggleWorkflow()\">\n                    <i class=\"fas fa-play\"></i>\n                    워크플로우 시작\n                </button>\n                <button class=\"btn btn-secondary\" onclick=\"showAutomationPopup()\">\n                    <i class=\"fas fa-clock\"></i>\n                    자동화 등록\n                </button>\n            </div>\n        </div>\n        \n        <!-- 메인 콘텐츠 -->\n        <div class=\"main-content\">\n            <div class=\"canvas-container\">\n                <div class=\"canvas-header\">\n                    <h2 class=\"canvas-title\">워크플로우 시각화</h2>\n                    <p class=\"canvas-subtitle\">현재 진행 중인 작업의 상태를 확인하세요</p>\n                </div>\n                \n                <div class=\"workflow-canvas\" id=\"workflowCanvas\">\n                    <svg class=\"connections-svg\" id=\"connections\"></svg>\n                    <div class=\"empty-state\" id=\"emptyState\">\n                        <i class=\"fas fa-play-circle\"></i>\n                        <h3>워크플로우 대기 중</h3>\n                        <p>시작 버튼을 눌러 작업을 시작하세요.</p>\n                    </div>\n                </div>\n            </div>\n            \n            <!-- 오른쪽 패널 -->\n            <div class=\"right-panel\" id=\"rightPanel\">\n                <h3>태스크 상세정보</h3>\n                <div id=\"taskDetails\">\n                    <p>노드를 선택하여 상세 내용을 확인하세요.</p>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <!-- 자동화 등록 팝업 -->\n    <div class=\"popup-overlay\" id=\"automationPopup\">\n        <div class=\"popup\">\n            <h3>자동화 등록</h3>\n            <div class=\"popup-form\">\n                <select class=\"popup-select\" id=\"automationPeriod\">\n                    <option value=\"day\">매일</option>\n                    <option value=\"week\">매주</option>\n                </select>\n                <input type=\"number\" class=\"popup-input\" id=\"automationInterval\" min=\"1\" value=\"1\" placeholder=\"간격 (숫자)\">\n            </div>\n            <div class=\"popup-buttons\">\n                <button class=\"popup-btn popup-btn-secondary\" onclick=\"closeAutomationPopup()\">취소</button>\n                <button class=\"popup-btn popup-btn-primary\" onclick=\"registerAutomation()\">등록</button>\n            </div>\n        </div>\n    </div>\n<script>\nconst SUPABASE_URL = \"{{ $json.SUPABASE_URL }}\"; // 실제 Supabase URL로 교체\nconst SUPABASE_ANON_KEY = \"{{ $json.SUPABASE_ANON_KEY }}\"; // 실제 anon key로 교체\n\nconst supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);\n\nconst PLAYLIST_FETCH_URL = \"{{ $json.PLAYLIST_FETCH_URL }}\";\nconst WORKFLOW_START_URL = \"{{ $json.WORKFLOW_START_URL }}\";\nconst AUTOMATION_REGISTER_URL = \"{{ $json.AUTOMATION_REGISTER_URL }}\";\n\nlet isWorkflowRunning = false;\nlet selectedPlaylists = [];\nlet selectedChannels = [];\nlet currentTasks = [];\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    initializeDates();\n    loadPlaylists();\n    loadTasksFromDB();\n    setupSupabaseListener();\n    \n    // CSS 강제 적용\n    const style = document.createElement('style');\n    style.textContent = `\n        .workflow-canvas {\n            position: relative !important;\n            min-height: 1500px !important;\n            width: 100% !important;\n            overflow: visible !important;\n        }\n        \n        .task-node {\n            position: absolute !important;\n            width: 280px !important;\n            height: 120px !important;  /* 고정 높이 */\n            margin-bottom: 0 !important;\n            padding: 16px !important;\n            border-radius: 16px !important;\n            box-shadow: 0 4px 20px rgba(0,0,0,0.1) !important;\n            cursor: pointer !important;\n            transition: all 0.3s ease !important;\n            overflow: hidden !important;  /* 텍스트 오버플로우 방지 */\n            display: flex !important;\n            flex-direction: column !important;\n        }\n        \n        .task-node h3 {\n            margin: 0 0 8px 0 !important;\n            font-size: 16px !important;\n            height: 24px !important;\n            flex-shrink: 0 !important;\n        }\n        \n        .task-node p {\n            margin: 0 !important;\n            font-size: 13px !important;\n            line-height: 1.4 !important;\n            flex: 1 !important;\n            overflow: hidden !important;\n            display: -webkit-box !important;\n            -webkit-line-clamp: 4 !important;  /* 최대 4줄 */\n            -webkit-box-orient: vertical !important;\n            text-overflow: ellipsis !important;\n        }\n        \n        .connections-svg {\n            position: absolute !important;\n            top: 0 !important;\n            left: 0 !important;\n            width: 100% !important;\n            height: 100% !important;\n            pointer-events: none !important;\n            z-index: 1 !important;\n        }\n        \n        .connection-line {\n            stroke: #cbd5e0 !important;\n            stroke-width: 3 !important;\n            fill: none !important;\n            stroke-dasharray: 5,5 !important;\n            opacity: 0.8 !important;\n        }\n        \n        .canvas-container {\n            overflow: auto !important;\n            max-height: 80vh !important;\n        }\n    `;\n    document.head.appendChild(style);\n});\n\nfunction initializeDates() {\n    const today = new Date().toISOString().split('T')[0];\n    document.getElementById('dateAfter').value = today;\n    document.getElementById('dateBefore').value = today;\n}\n\nasync function loadTasksFromDB() {\n    try {\n        const { data: tasks, error } = await supabase\n            .from('workflow_tasks')\n            .select('*')\n            .order('task_id', { ascending: true });\n\n        if (error) {\n            console.error('태스크 로드 오류:', error);\n            return;\n        }\n\n        currentTasks = tasks.map(task => ({\n            id: task.task_id,\n            title: task.title,\n            description: task.description,\n            status: task.status,\n            parent_ids: task.parent_ids || [],\n            created_at: task.created_at,\n            updated_at: task.updated_at\n        }));\n\n        console.log('로드된 태스크:', currentTasks);\n\n        if (currentTasks.length > 0) {\n            hideEmptyState();\n            renderTasks();\n        }\n    } catch (error) {\n        console.error('태스크 로드 실패:', error);\n    }\n}\n\nfunction setupSupabaseListener() {\n    supabase\n        .channel('task-changes')\n        .on('postgres_changes', { \n            event: '*', \n            schema: 'public', \n            table: 'workflow_tasks' \n        }, handleTaskChange)\n        .subscribe();\n}\n\nfunction handleTaskChange(payload) {\n    console.log('Task change detected:', payload);\n    \n    if (payload.eventType === 'INSERT') {\n        updateTaskFromSupabase(payload.new);\n    } else if (payload.eventType === 'UPDATE') {\n        updateTaskFromSupabase(payload.new);\n    } else if (payload.eventType === 'DELETE') {\n        removeTaskFromUI(payload.old.task_id);\n    }\n}\n\nfunction updateTaskFromSupabase(taskData) {\n    const formattedTask = {\n        id: taskData.task_id,\n        title: taskData.title,\n        description: taskData.description,\n        status: taskData.status,\n        parent_ids: taskData.parent_ids || [],\n        created_at: taskData.created_at,\n        updated_at: taskData.updated_at\n    };\n    \n    const existingTaskIndex = currentTasks.findIndex(t => t.id === taskData.task_id);\n    \n    if (existingTaskIndex >= 0) {\n        currentTasks[existingTaskIndex] = formattedTask;\n    } else {\n        currentTasks.push(formattedTask);\n        hideEmptyState();\n    }\n    \n    renderTasks();\n}\n\nfunction removeTaskFromUI(taskId) {\n    currentTasks = currentTasks.filter(t => t.id !== taskId);\n    renderTasks();\n    \n    if (currentTasks.length === 0) {\n        showEmptyState();\n    }\n}\n\n// 수정된 레벨 계산 함수\nfunction calculateLevels() {\n    const levels = {};\n    const taskMap = {};\n    \n    // 태스크 맵 생성\n    currentTasks.forEach(task => {\n        taskMap[task.id] = task;\n    });\n    \n    // 각 노드의 최대 깊이 계산\n    function getMaxDepth(taskId, visited = new Set()) {\n        if (visited.has(taskId)) return 0;\n        visited.add(taskId);\n        \n        const task = taskMap[taskId];\n        if (!task.parent_ids || task.parent_ids.length === 0) {\n            return 0;\n        }\n        \n        let maxParentDepth = 0;\n        task.parent_ids.forEach(parentId => {\n            const parentDepth = getMaxDepth(parentId, new Set(visited));\n            maxParentDepth = Math.max(maxParentDepth, parentDepth);\n        });\n        \n        return maxParentDepth + 1;\n    }\n    \n    // 각 태스크의 레벨 계산\n    currentTasks.forEach(task => {\n        const level = getMaxDepth(task.id);\n        if (!levels[level]) levels[level] = [];\n        levels[level].push(task.id);\n    });\n    \n    console.log('계산된 레벨:', levels);\n    return levels;\n}\n\n// 겹침 방지 위치 계산 함수\nfunction calculateNodePositions(levels) {\n    const positions = {};\n    const nodeWidth = 280;\n    const nodeHeight = 140; // 고정 높이 (패딩 포함)\n    const levelHeight = 180; // 레벨 간 최소 간격\n    const horizontalSpacing = 50;\n    const verticalSpacing = 20; // 같은 레벨 내 세로 간격\n    \n    const canvas = document.getElementById('workflowCanvas');\n    const canvasWidth = canvas.offsetWidth || 1200;\n    \n    // 이미 배치된 노드들의 위치 추적\n    const occupiedPositions = [];\n    \n    // 위치 겹침 체크 함수\n    function isPositionOccupied(x, y) {\n        return occupiedPositions.some(pos => \n            Math.abs(pos.x - x) < nodeWidth + 10 && \n            Math.abs(pos.y - y) < nodeHeight + 10\n        );\n    }\n    \n    // 사용 가능한 Y 좌표 찾기 함수\n    function findAvailableY(baseY, x) {\n        let y = baseY;\n        while (isPositionOccupied(x, y)) {\n            y += nodeHeight + verticalSpacing;\n        }\n        return y;\n    }\n    \n    let maxY = 0;\n    \n    Object.keys(levels).forEach(level => {\n        const levelNodes = levels[level];\n        const levelNum = parseInt(level);\n        const baseY = levelNum * levelHeight + 50;\n        \n        if (levelNodes.length === 1) {\n            // 단일 노드는 중앙에 배치\n            const nodeId = levelNodes[0];\n            const x = (canvasWidth - nodeWidth) / 2;\n            const y = findAvailableY(baseY, x);\n            \n            positions[nodeId] = { x, y };\n            occupiedPositions.push({ x, y });\n            maxY = Math.max(maxY, y + nodeHeight);\n            \n        } else {\n            // 다중 노드는 가로로 분산\n            const totalWidth = (levelNodes.length - 1) * (nodeWidth + horizontalSpacing);\n            const startX = (canvasWidth - totalWidth) / 2;\n            \n            levelNodes.forEach((nodeId, index) => {\n                const x = startX + index * (nodeWidth + horizontalSpacing);\n                const y = findAvailableY(baseY, x);\n                \n                positions[nodeId] = { x, y };\n                occupiedPositions.push({ x, y });\n                maxY = Math.max(maxY, y + nodeHeight);\n            });\n        }\n    });\n    \n    // 캔버스 높이 동적 조정\n    const requiredHeight = maxY + 100;\n    canvas.style.minHeight = requiredHeight + 'px';\n    \n    console.log('계산된 위치:', positions);\n    console.log('필요한 캔버스 높이:', requiredHeight);\n    \n    return positions;\n}\n\nfunction renderTasks() {\n    const canvas = document.getElementById('workflowCanvas');\n    const emptyState = document.getElementById('emptyState');\n    \n    emptyState.style.display = 'none';\n    \n    const existingNodes = canvas.querySelectorAll('.task-node');\n    existingNodes.forEach(node => node.remove());\n    \n    const levels = calculateLevels();\n    const nodePositions = calculateNodePositions(levels);\n    \n    currentTasks.forEach((task, index) => {\n        const node = createTaskNode(task, index);\n        const position = nodePositions[task.id];\n        \n        node.style.left = position.x + 'px';\n        node.style.top = position.y + 'px';\n        \n        canvas.appendChild(node);\n    });\n    \n    setTimeout(() => {\n        drawConnections();\n    }, 150);\n}\n\n// 텍스트 자르기 함수\nfunction truncateText(text, maxLength = 80) {\n    if (text.length <= maxLength) return text;\n    return text.substring(0, maxLength) + '...';\n}\n\nfunction createTaskNode(task, index) {\n    const node = document.createElement('div');\n    node.className = `task-node ${task.status}`;\n    node.dataset.taskId = task.id;\n    \n    // ID 옆에 표시할 제목 길이 제한 (35자)\n    const truncatedTitleForHeader = truncateText(task.title, 35);\n    \n    node.innerHTML = `\n        <h3>\n            <span title=\"${task.title}\">#${task.id} - ${truncatedTitleForHeader}</span>\n            <span class=\"task-status\">${getStatusText(task.status)}</span>\n        </h3>\n    `;\n    \n    node.addEventListener('click', () => showTaskDetails(task));\n    \n    return node;\n}\n\nfunction getStatusText(status) {\n    const statusMap = {\n        'completed': '완료',\n        'running': '실행중',\n        'pending': '대기',\n        'waiting': '대기중'\n    };\n    return statusMap[status] || status;\n}\n\nfunction drawConnections() {\n    const svg = document.getElementById('connections');\n    svg.innerHTML = '';\n    \n    const canvas = document.getElementById('workflowCanvas');\n    const nodes = canvas.querySelectorAll('.task-node');\n    \n    // SVG 크기를 캔버스 전체 크기에 맞춤\n    const canvasHeight = canvas.scrollHeight;\n    const canvasWidth = canvas.offsetWidth;\n    \n    svg.setAttribute('width', canvasWidth);\n    svg.setAttribute('height', canvasHeight);\n    svg.style.height = canvasHeight + 'px';\n    \n    console.log('연결선 그리기 시작, SVG 크기:', canvasWidth, 'x', canvasHeight);\n    \n    currentTasks.forEach(task => {\n        if (task.parent_ids && task.parent_ids.length > 0) {\n            console.log(`태스크 #${task.id}의 부모: ${task.parent_ids.join(', ')}`);\n            \n            task.parent_ids.forEach(parentId => {\n                const parentNode = Array.from(nodes).find(node => \n                    parseInt(node.dataset.taskId) === parentId\n                );\n                const childNode = Array.from(nodes).find(node => \n                    parseInt(node.dataset.taskId) === task.id\n                );\n                \n                if (parentNode && childNode) {\n                    console.log(`연결선 생성: #${parentId} → #${task.id}`);\n                    const path = createCurvedPath(parentNode, childNode);\n                    svg.appendChild(path);\n                } else {\n                    console.log(`연결선 생성 실패: #${parentId} → #${task.id}`, {\n                        parentNode: !!parentNode,\n                        childNode: !!childNode\n                    });\n                }\n            });\n        }\n    });\n}\n\nfunction createCurvedPath(startNode, endNode) {\n    const canvas = document.getElementById('workflowCanvas');\n    \n    // 노드의 절대 위치 계산 (캔버스 기준)\n    const startX = parseFloat(startNode.style.left) + 140; // 노드 중앙\n    const startY = parseFloat(startNode.style.top) + 120; // 노드 하단 (고정 높이)\n    const endX = parseFloat(endNode.style.left) + 140; // 노드 중앙  \n    const endY = parseFloat(endNode.style.top);\n    \n    const controlOffset = Math.abs(endY - startY) / 2;\n    \n    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n    const pathData = `M ${startX} ${startY} C ${startX} ${startY + controlOffset}, ${endX} ${endY - controlOffset}, ${endX} ${endY}`;\n    path.setAttribute('d', pathData);\n    path.setAttribute('class', 'connection-line');\n    \n    console.log('Path 생성:', pathData);\n    \n    return path;\n}\n\n// 나머지 함수들은 동일...\nasync function loadPlaylists() {\n    try {\n        const response = await fetch(PLAYLIST_FETCH_URL, {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' }\n        });\n        const result = await response.json();\n        \n        if (result.success && result.data) {\n            populatePlaylistDropdown(result.data);\n        } else {\n            showEmptyPlaylistState();\n        }\n    } catch (error) {\n        console.error('플레이리스트 로딩 실패:', error);\n        showEmptyPlaylistState();\n    }\n}\n\nfunction populatePlaylistDropdown(playlists) {\n    const select = document.getElementById('playlistSelect');\n    select.innerHTML = '<option value=\"\">플레이리스트 선택</option>';\n    \n    playlists.forEach(playlist => {\n        const option = document.createElement('option');\n        option.value = playlist.id;\n        option.textContent = playlist.title;\n        select.appendChild(option);\n    });\n}\n\nfunction showEmptyPlaylistState() {\n    const select = document.getElementById('playlistSelect');\n    select.innerHTML = '<option value=\"\">플레이리스트 없음</option>';\n}\n\ndocument.getElementById('playlistSelect').addEventListener('change', function() {\n    const selectedValue = this.value;\n    const selectedText = this.options[this.selectedIndex].text;\n    \n    if (selectedValue && !selectedPlaylists.find(p => p.id === selectedValue)) {\n        selectedPlaylists.push({ id: selectedValue, title: selectedText });\n        updatePlaylistTags();\n    }\n});\n\nfunction updatePlaylistTags() {\n    const container = document.getElementById('selectedPlaylists');\n    container.innerHTML = '';\n    \n    selectedPlaylists.forEach(playlist => {\n        const tag = document.createElement('div');\n        tag.className = 'tag';\n        tag.innerHTML = `\n            ${playlist.title}\n            <span class=\"tag-remove\" onclick=\"removePlaylist('${playlist.id}')\">×</span>\n        `;\n        container.appendChild(tag);\n    });\n}\n\nfunction removePlaylist(playlistId) {\n    selectedPlaylists = selectedPlaylists.filter(p => p.id !== playlistId);\n    updatePlaylistTags();\n}\n\nfunction addChannel() {\n    const input = document.getElementById('channelInput');\n    const channelName = input.value.trim();\n    \n    if (channelName && !selectedChannels.includes(channelName)) {\n        selectedChannels.push(channelName);\n        updateChannelTags();\n        input.value = '';\n    }\n}\n\nfunction updateChannelTags() {\n    const container = document.getElementById('selectedChannels');\n    container.innerHTML = '';\n    \n    selectedChannels.forEach(channel => {\n        const tag = document.createElement('div');\n        tag.className = 'tag';\n        tag.innerHTML = `\n            ${channel}\n            <span class=\"tag-remove\" onclick=\"removeChannel('${channel}')\">×</span>\n        `;\n        container.appendChild(tag);\n    });\n}\n\nfunction removeChannel(channelName) {\n    selectedChannels = selectedChannels.filter(c => c !== channelName);\n    updateChannelTags();\n}\n\ndocument.getElementById('channelInput').addEventListener('keypress', function(e) {\n    if (e.key === 'Enter') {\n        addChannel();\n    }\n});\n\nasync function toggleWorkflow() {\n    if (isWorkflowRunning) {\n        stopWorkflow();\n    } else {\n        startWorkflow();\n    }\n}\n\nasync function startWorkflow() {\n    const formData = getFormData();\n    \n    try {\n        const response = await fetch(WORKFLOW_START_URL, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(formData)\n        });\n        \n        const result = await response.json();\n        \n        if (result.success) {\n            isWorkflowRunning = true;\n            updateStartButton();\n            hideEmptyState();\n            console.log('워크플로우 시작됨:', result.workflowId);\n        } else {\n            alert('워크플로우 시작에 실패했습니다.');\n        }\n    } catch (error) {\n        console.error('워크플로우 시작 오류:', error);\n        alert('워크플로우 시작 중 오류가 발생했습니다.');\n    }\n}\n\nfunction stopWorkflow() {\n    isWorkflowRunning = false;\n    updateStartButton();\n    showEmptyState();\n    clearTasks();\n}\n\nfunction updateStartButton() {\n    const btn = document.getElementById('startBtn');\n    if (isWorkflowRunning) {\n        btn.innerHTML = '<i class=\"fas fa-stop\"></i> 워크플로우 중지';\n        btn.className = 'btn btn-stop';\n    } else {\n        btn.innerHTML = '<i class=\"fas fa-play\"></i> 워크플로우 시작';\n        btn.className = 'btn btn-primary';\n    }\n}\n\nfunction getFormData() {\n    return {\n        searchQuery: document.getElementById('searchQuery').value,\n        dateAfter: document.getElementById('dateAfter').value,\n        dateBefore: document.getElementById('dateBefore').value,\n        selectedPlaylists: selectedPlaylists.map(p => p.id),\n        youtubeChannels: selectedChannels\n    };\n}\n\nfunction showAutomationPopup() {\n    document.getElementById('automationPopup').classList.add('active');\n}\n\nfunction closeAutomationPopup() {\n    document.getElementById('automationPopup').classList.remove('active');\n}\n\nasync function registerAutomation() {\n    const period = document.getElementById('automationPeriod').value;\n    const interval = parseInt(document.getElementById('automationInterval').value);\n    const workflowConfig = getFormData();\n    \n    try {\n        const response = await fetch(AUTOMATION_REGISTER_URL, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                period,\n                interval,\n                workflowConfig\n            })\n        });\n        \n        const result = await response.json();\n        \n        if (result.success) {\n            alert('자동화가 성공적으로 등록되었습니다.');\n            closeAutomationPopup();\n            console.log('자동화 등록됨:', result.automationId);\n        } else {\n            alert('자동화 등록에 실패했습니다.');\n        }\n    } catch (error) {\n        console.error('자동화 등록 오류:', error);\n        alert('자동화 등록 중 오류가 발생했습니다.');\n    }\n}\n\ndocument.getElementById('automationPopup').addEventListener('click', function(e) {\n    if (e.target === this) {\n        closeAutomationPopup();\n    }\n});\n\nfunction showTaskDetails(task) {\n    const panel = document.getElementById('rightPanel');\n    const details = document.getElementById('taskDetails');\n    \n    const getTaskTime = (task) => {\n        if (task.status === 'running') {\n            return { \n                startTime: task.updated_at, \n                endTime: null \n            };\n        } else if (task.status === 'completed') {\n            return { \n                startTime: task.created_at, \n                endTime: task.updated_at \n            };\n        }\n        return { \n            startTime: null, \n            endTime: null \n        };\n    };\n    \n    const { startTime, endTime } = getTaskTime(task);\n    \n    details.innerHTML = `\n        <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;\">\n            <h3 style=\"margin: 0; color: #2d3748;\">작업 상세정보</h3>\n            <button onclick=\"closeTaskDetails()\" style=\"background: none; border: none; font-size: 18px; cursor: pointer; color: #718096;\">\n                <i class=\"fas fa-times\"></i>\n            </button>\n        </div>\n        \n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 12px; padding: 16px; margin-bottom: 16px; color: white;\">\n            <div style=\"display: flex; align-items: center; gap: 8px; margin-bottom: 12px; font-weight: 600;\">\n                <i class=\"fas fa-info-circle\"></i>\n                기본 정보\n            </div>\n            <div style=\"font-size: 14px; line-height: 1.5;\">\n                <div style=\"margin-bottom: 8px;\"><span style=\"opacity: 0.8;\">작업 ID:</span> #${task.id}</div>\n                <div style=\"margin-bottom: 8px;\"><span style=\"opacity: 0.8;\">제목:</span> ${task.title}</div>\n                <div><span style=\"opacity: 0.8;\">상태:</span> \n                    <span style=\"display: inline-block; width: 8px; height: 8px; border-radius: 50%; background: ${getStatusColor(task.status)}; margin: 0 8px;\"></span>\n                    ${getStatusText(task.status)}\n                </div>\n            </div>\n        </div>\n        \n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 12px; padding: 16px; margin-bottom: 16px; color: white;\">\n            <div style=\"display: flex; align-items: center; gap: 8px; margin-bottom: 12px; font-weight: 600;\">\n                <i class=\"fas fa-align-left\"></i>\n                설명\n            </div>\n            <div style=\"font-size: 14px; opacity: 0.9; word-break: break-word;\">\n                ${task.description}\n            </div>\n        </div>\n        \n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 12px; padding: 16px; margin-bottom: 16px; color: white;\">\n            <div style=\"display: flex; align-items: center; gap: 8px; margin-bottom: 12px; font-weight: 600;\">\n                <i class=\"fas fa-clock\"></i>\n                실행 시간\n            </div>\n            <div style=\"font-size: 14px; opacity: 0.9;\">\n                <div style=\"margin-bottom: 4px;\">생성: ${formatDateTime(task.created_at)}</div>\n                <div style=\"margin-bottom: 4px;\">시작: ${formatDateTime(startTime)}</div>\n                <div>완료: ${formatDateTime(endTime)}</div>\n            </div>\n        </div>\n        \n        <div style=\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 12px; padding: 16px; color: white;\">\n            <div style=\"display: flex; align-items: center; gap: 8px; margin-bottom: 12px; font-weight: 600;\">\n                <i class=\"fas fa-list-ul\"></i>\n                로그\n            </div>\n            <div style=\"font-size: 12px; opacity: 0.8;\">\n                <div>• 상태: ${getStatusText(task.status)}</div>\n                <div>• 부모 태스크: ${task.parent_ids && task.parent_ids.length > 0 ? task.parent_ids.map(id => '#' + id).join(', ') : '없음'}</div>\n                <div>• 마지막 업데이트: ${formatDateTime(task.updated_at)}</div>\n            </div>\n        </div>\n    `;\n    \n    panel.classList.add('active');\n}\n\nfunction getStatusColor(status) {\n    const colorMap = {\n        'completed': '#48bb78',\n        'running': '#4299e1',\n        'pending': '#a0aec0',\n        'failed': '#f56565',\n        'stopped': '#ed8936'\n    };\n    return colorMap[status] || '#a0aec0';\n}\n\nfunction formatDateTime(dateTime) {\n    if (!dateTime) return '미설정';\n    return new Date(dateTime).toLocaleString('ko-KR');\n}\n\nfunction closeTaskDetails() {\n    const panel = document.getElementById('rightPanel');\n    panel.classList.remove('active');\n}\n\nfunction hideEmptyState() {\n    document.getElementById('emptyState').style.display = 'none';\n}\n\nfunction showEmptyState() {\n    document.getElementById('emptyState').style.display = 'block';\n}\n\nfunction clearTasks() {\n    const canvas = document.getElementById('workflowCanvas');\n    const nodes = canvas.querySelectorAll('.task-node');\n    nodes.forEach(node => node.remove());\n    \n    const svg = document.getElementById('connections');\n    svg.innerHTML = '';\n    \n    const rightPanel = document.getElementById('rightPanel');\n    rightPanel.classList.remove('active');\n}\n\nwindow.addEventListener('resize', () => {\n    if (currentTasks.length > 0) {\n        setTimeout(() => {\n            renderTasks(); // 전체 다시 렌더링\n        }, 100);\n    }\n});\n</script>\n\n\n\n</body>\n</html>\n"
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        440,
        0
      ],
      "id": "22e5f7d7-bd6d-4b8b-b314-8dece9184b09",
      "name": "HTML"
    },
    {
      "parameters": {
        "path": "youtube-scrap",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        0
      ],
      "id": "251611ea-ca91-439b-93ce-d812bc8e254e",
      "name": "Webhook",
      "webhookId": "fbd3c3de-285f-44dd-8353-c02c706d0e7e"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.html }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        660,
        0
      ],
      "id": "e12a4430-f43a-442b-a5d8-94ea8f05ccf5",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c6a6977a-8f64-48d7-a067-b485d056bcfe",
              "name": "PLAYLIST_FETCH_URL",
              "value": "",
              "type": "string"
            },
            {
              "id": "6a9b7a53-4bc5-44dc-a1e1-5b8a08734132",
              "name": "WORKFLOW_START_URL",
              "value": "",
              "type": "string"
            },
            {
              "id": "54791709-efad-45b0-8b0d-97b405b29564",
              "name": "AUTOMATION_REGISTER_URL",
              "value": "",
              "type": "string"
            },
            {
              "id": "60b4a0b5-fe47-46fc-a470-6345ea8db406",
              "name": "SUPABASE_URL",
              "value": "",
              "type": "string"
            },
            {
              "id": "20ebfbb6-3bc9-44d6-92be-ca22077494e4",
              "name": "SUPABASE_ANON_KEY",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        220,
        0
      ],
      "id": "86a94afb-2379-4be8-80ac-6d1eec3437bc",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "content": "## UI만드는 방법\nhttps://www.genspark.ai/agents?id=43e34d73-5fbb-44b5-bc8f-c06e37c8a1e1"
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        380,
        -220
      ],
      "id": "cddaf5e6-590e-4844-85c3-41cf6170641a",
      "name": "Sticky Note1"
    }
  ],
  "connections": {
    "HTML": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          },
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "versionId": "1512d696-7ee6-4bc3-b8eb-949c24ca2dcd",
  "triggerCount": 1,
  "tags": [
    {
      "createdAt": "2025-07-08T15:35:33.705Z",
      "updatedAt": "2025-07-08T15:35:33.705Z",
      "id": "PaO0qjDwUNAeujfe",
      "name": "n8n 서울 밋업"
    }
  ]
}